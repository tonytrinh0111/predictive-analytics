## Run this code in R to install packages required in Predictive Analytics
install.packages(c("tidyverse",
"Metrics",
"forecast",
"rpart",
"rpart.plot",
"vip",
"neuralnet",
"NeuralNetTools",
"factoextra",
"clue",
"caret",
"randomForest",
"mboost",
"e1071"),
dependencies=TRUE)
install.packages("Metrics")
install.packages("vip")
install.packages("clue")
install.packages("caret")
library(abind)
detach("package:abind", unload = TRUE)
install.packages("fpp3")
abc
abc="abc"
abc
abc
4*5
x=4
x
##Vector, matrix and array objects
# A 3x1 vector of zeros
v=c(0,0,0)
# Checking the length of v
dim(v)
# A 3x2 matrix, filled with zero
m=matrix(0,nrow=3,ncol=2)
##Data Frames
#An example of creation of data frame.
#Name is a collection of characters
name=c("Abby","Bob","Chris")
#Height is numeric
height=c(165,188)
#A dataframe can contain data of different types
data=data.frame(name,height)
#Height is numeric
height=c(165,188,179)
#A dataframe can contain data of different types
data=data.frame(name,height)
##Data Frames
#An example of creation of data frame.
#Name is a collection of characters
name=c("Abby","Bob",Chris)
View(data)
##List Objects
#First let's create some items
a=matrix(0,nrow=5,ncol=10)
b=300
#You can collect together a and b in a list
ab_list=list(A=a,B=b)
#To call the components of the list, use "$" sign
ab_list$A
ab_list$B
setwd("~/Downloads/OneDrive - The University of Melbourne/MBA-Tony’s MacBook Pro/7. Predictive Analytics")
##Importing and Exporting Data
#Ensure that "salary.csv" is saved in your working directory
#The most convenient data format is the .csv format
salary=read.csv(file="workshop/RComp_code&data/salary.csv",header=TRUE)
View(salary)
#Let's look at the first few lines
head(salary)
setwd("~/Downloads/OneDrive - The University of Melbourne/MBA-Tony’s MacBook Pro/7. Predictive Analytics/workshop")
##Importing and Exporting Data
#Ensure that "salary.csv" is saved in your working directory
#The most convenient data format is the .csv format
salary=read.csv(file="workshop/RComp_code&data/salary.csv",header=TRUE)
##Importing and Exporting Data
#Ensure that "salary.csv" is saved in your working directory
#The most convenient data format is the .csv format
salary=read.csv(file="RComp_code&data/salary.csv",header=TRUE)
##Writing your own functions
#A function to compute relative change from x1 to x2, where x1 is the base value
relative_change<-function(x1,x2){
dec=(x2-x1)/x1
perc=dec*100
return(list(percentage=perc,decimal=dec))
}
View(relative_change)
help()
setwd("~/Downloads/OneDrive - The University of Melbourne/MBA-Tony’s MacBook Pro/7. Predictive Analytics/workshop/RComp_code&data")
#Read the data from .csv file.
#Make sure that you have set the working directory to the location of the data file.
# use quotation, single or double for string, filename
raw_data=read.csv('salary.csv')
#Compute gender specific average salary
mean_M=mean(salary[salary$Gender=="M",'salary'])
#Compute gender specific average salary
mean_M=mean(raw_data[salary$Gender=="M",'salary'])
#Compute gender specific average salary
mean_M=mean(raw_data[raw_data$Gender=="M",'salary'])
mean_F=mean(raw_data[raw_data$Gender=="F",'salary'])
mean_M
mean_F
#Compute the relative difference from simple average - in percentage
100*(mean_M-mean_F)/mean_F
#Conduct a t-test of mean difference between the two Genders
t.test(salary~Gender,data=salary)
#Conduct a t-test of mean difference between the two Genders
t.test(raw_data~Gender,data=raw_data)
#Conduct a t-test of mean difference between the two Genders
t.test(salary~Gender,data=raw_data)
#Conduct a t-test of mean difference between the two Genders
t.test(salary~Gender,data=raw_data)
#Fit a multiple linear regression
fit1=lm(salary~age+Expr+education+Gender, data=raw_data)
#Let us look at a summary of the model fit
summary(fit1)
#Compute the model implied differential - in percentage
100*fit1$coefficients["GenderM"]/mean_F
#A scatter plot of actual salary vs fitted values
plot(x=raw_data$salary,y=fit1$fitted.values,
xlab="Actual",ylab="Fitted",main="Actual vs Fitted")
#Plot a linear line where intercept=0 and slope=1
abline(a=0,b=1,col="red")
##Residual diagnostics
#Plot of residual histogram
hist(fit1$residuals,25)
#Scatter of residuals vs fitted values and residuals vs Expr
par(mfrow=c(2,2))
plot(x=salary$age,y=fit1$residuals,xlab="Age",ylab="Residuals",
main="Residuals vs Age")
abline(a=0,b=0,col="red")
plot(x=salary$Expr,y=fit1$residuals,xlab="Expr",ylab="Residuals",
main="Residuals vs Expr")
abline(a=0,b=0,col="red")
plot(x=salary$education,y=fit1$residuals,xlab="Education",ylab="Residuals",
main="Residuals vs Education")
abline(a=0,b=0,col="red")
#Scatter of residuals vs fitted values and residuals vs Expr
par(mfrow=c(2,2))
plot(x=raw_data$age,y=fit1$residuals,xlab="Age",ylab="Residuals",
main="Residuals vs Age")
abline(a=0,b=0,col="red")
plot(x=raw_data$Expr,y=fit1$residuals,xlab="Expr",ylab="Residuals",
main="Residuals vs Expr")
abline(a=0,b=0,col="red")
plot(x=raw_data$education,y=fit1$residuals,xlab="Education",ylab="Residuals",
main="Residuals vs Education")
abline(a=0,b=0,col="red")
#Improving the model
#Reclassify education as a factor variable - this is ordinal or categorical data
raw_data$education=as.factor(raw_data$education)
#Fit a nonlinear regression model
fit2=lm(salary~age+I(age^2)+Expr+I(Expr^2)+education+Gender,data=salary)
#Fit a nonlinear regression model
fit2=lm(salary~age+I(age^2)+Expr+I(Expr^2)+education+Gender,data=raw_data)
#Improved model summary
summary(fit2)
#Improved model summary
summary(fit2)
#Plot of residual histogram
hist(fit2$residuals,25)
#Scatter of residuals vs fitted values and residuals vs Expr
par(mfrow=c(2,2))
plot(x=salary$age,y=fit2$residuals,xlab="Age",ylab="Residuals",
main="Residuals vs Age")
#Scatter of residuals vs fitted values and residuals vs Expr
par(mfrow=c(2,2))
plot(x=raw_data$age,y=fit2$residuals,xlab="Age",ylab="Residuals",
main="Residuals vs Age")
abline(a=0,b=0,col="red")
plot(x=raw_data$Expr,y=fit2$residuals,xlab="Expr",ylab="Residuals",
main="Residuals vs Expr")
abline(a=0,b=0,col="red")
plot(x=raw_data$education,y=fit2$residuals,xlab="Education",ylab="Residuals",
main="Residuals vs Education")
abline(a=0,b=0,col="red")
#Model implied differential - in percentage
100*fit2$coefficients["GenderM"]/mean_F
#Characteristic profile by gender
#Age and experience profiles are captured by box plots
boxplot(age~Gender,data=salary,main="Age profile by gender")
#Characteristic profile by gender
#Age and experience profiles are captured by box plots
boxplot(age~Gender,data=raw_data,main="Age profile by gender")
boxplot(Expr~Gender,data=raw_data,main="Experience profile by gender")
#The relative frequency table is used to compare the education profile
FEduc=100*table(raw_data$education[raw_data$Gender=="F"])/sum(raw_data$Gender=="F")
MEduc=100*table(raw_data$education[raw_data$Gender=="M"])/sum(raw_data$Gender=="M")
FEduc
MEduc
raw_data$education=as.number(raw_data$education)
raw_data$education=as.numeric(raw_data$education)
#Improving the model
#Reclassify education as a factor variable - this is ordinal or categorical data
raw_data$education=as.factor(raw_data$education)
#Read the data from .csv file.
#Make sure that you have set the working directory to the location of the data file.
# use quotation, single or double for string, filename
raw_data=read.csv('salary.csv')
#Improving the model
#Reclassify education as a factor variable - this is ordinal or categorical data
raw_data$education=as.factor(raw_data$education)
#Read the data from .csv file.
#Make sure that you have set the working directory to the location of the data file.
# use quotation, single or double for string, filename
raw_data=read.csv('salary.csv')
#Improving the model
#Reclassify education as a factor variable - this is ordinal or categorical data
raw_data$education=as.factor(raw_data$education)
clear
clean
fit2=lm(salary~age+I(age^2)+Expr+I(Expr^2)+education+Gender,data=raw_data)
#Improved model summary
summary(fit2)
par(mfrow=c(2,2))
plot(x=raw_data$age,y=fit2$residuals,xlab="Age",ylab="Residuals",
main="Residuals vs Age")
abline(a=0,b=0,col="red")
plot(x=raw_data$Expr,y=fit2$residuals,xlab="Expr",ylab="Residuals",
main="Residuals vs Expr")
abline(a=0,b=0,col="red")
plot(x=raw_data$education,y=fit2$residuals,xlab="Education",ylab="Residuals",
main="Residuals vs Education")
abline(a=0,b=0,col="red")
clc()
#seq() is a command to generage a sequence
x1=seq(from=100,to=120,by=1)
#seq() is a command to generage a sequence
x1=seq(from=100,to=120,by=1)
x2=seq(from=101,to=121,by=1)
#first find out the length of x1
n=length(x1)
#create storate vector for percentage and decimal changes
perc=matrix(0,n,1)
dec=matrix(0,n,1)
for(i in 1:n){
#store the list in a tmp object
tmp=relative_change(x1[i],x2[i])
#allocate percentage and decimal changes appropriately
perc[i]=tmp$percentage
dec[i]=tmp$decimal
}
##Writing your own functions
#A function to compute relative change from x1 to x2, where x1 is the base value
relative_change<-function(x1,x2){
dec=(x2-x1)/x1
perc=dec*100
return(list(percentage=perc,decimal=dec))
}
for(i in 1:n){
#store the list in a tmp object
tmp=relative_change(x1[i],x2[i])
#allocate percentage and decimal changes appropriately
perc[i]=tmp$percentage
dec[i]=tmp$decimal
}
perc
dec
sample_matrix=matric(n,1)
sample_matrix=matrix(n,1)
sample_matrix
for(i in 1:n){
#store the list in a tmp object
tmp=relative_change(x1[i],x2[i])
#allocate percentage and decimal changes appropriately
perc[i]=tmp$percentage
dec[i]=tmp$decimal
}
#Read the data from .csv file.
#Make sure that you have set the working directory to the location of the data file.
# use quotation, single or double for string, filename
raw_data=read.csv('salary.csv')
View(raw_data)
#Compute gender specific average salary
mean_all=mean(raw_data[,'salary'])
mean_M=mean(raw_data[raw_data$Gender=="M",'salary'])
mean_F=mean(raw_data[raw_data$Gender=="F",'salary'])
mean_M
mean_F
#Compute the relative difference from simple average - in percentage
100*(mean_M-mean_F)/mean_F
